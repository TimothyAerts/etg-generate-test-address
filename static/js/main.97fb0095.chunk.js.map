{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","createKeccakHash","require","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toHexString","byteArray","Array","from","byte","toString","slice","join","generateRandomNumber","asyncToGenerator","regenerator_default","a","mark","_callee","privKey","hexPrivKey","pubKey","hexPubKey","hashPubKey","address","wrap","_context","prev","next","randomBytes","secp256k1","publicKeyCreate","setState","randomNumber","pubKeyString","update","sent","keccak","digest","state","stop","minRange","maxRange","maxRangeString","react_default","createElement","className","Button_default","variant","onClick","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2VCMlCC,UAAmBC,EAAQ,MAyDlBC,cAtDb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAaRQ,YAAc,SAACC,GACb,OAAOC,MAAMC,KAAKF,EAAW,SAASG,GACpC,OAAQ,KAAc,IAAPA,GAAaC,SAAS,KAAKC,OAAO,KAChDC,KAAK,KAjBQd,EAoBlBe,qBApBkBd,OAAAe,EAAA,EAAAf,CAAAgB,EAAAC,EAAAC,KAoBK,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAT,EAAAC,EAAAS,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACjBT,EAAUU,sBAAY,IACtBT,EAAatB,EAAKO,YAAYc,GAE9BE,EAAUS,IAAUC,gBAAgBZ,GAAQ,GAAOR,MAAM,GACzDW,EAAYxB,EAAKO,YAAYgB,GACjCvB,EAAKkC,SAAS,CAACC,aAAab,IAC5BtB,EAAKkC,SAAS,CAACE,aAAaZ,IAPPI,EAAAE,KAAA,EAQElC,EAAiB,aAAayC,OAAOd,GARvC,OAQjBE,EARiBG,EAAAU,KASrBtC,EAAKkC,SAAS,CAACK,OAAOd,EAAWe,OAAO,SACpCd,EAAU1B,EAAKyC,MAAMF,OAAO3B,WAAWC,OAAO,IAClDb,EAAKkC,SAAS,CAACR,QAAQA,IAXF,yBAAAE,EAAAc,SAAAtB,MAlBrBpB,EAAKyC,MAAQ,CACXN,aAAa,EACbZ,OAAO,EACPa,aAAa,EACbG,OAAO,EACPb,QAAQ,EACRiB,SAAS,EACTC,SAAS,qBACTC,eAAe,sEAVD7C,wEAmChB,OACE8C,EAAA5B,EAAA6B,cAAA,OAAKC,UAAU,OACfF,EAAA5B,EAAA6B,cAAA,uCAA+B5C,KAAKsC,MAAME,SAAS/B,SAAS,IAA5D,IAAiEkC,EAAA5B,EAAA6B,cAAA,WAAjE,8BAC4B5C,KAAKsC,MAAMI,gBAErCC,EAAA5B,EAAA6B,cAACE,EAAA/B,EAAD,CAAQgC,QAAQ,YACRC,QAAShD,KAAKY,qBACdqC,MAAM,WAFd,wCAKAN,EAAA5B,EAAA6B,cAAA,6BAAqB5C,KAAKsC,MAAMN,aAAavB,SAAS,KACtDkC,EAAA5B,EAAA6B,cAAA,0BAAkB5C,KAAKsC,MAAML,cAC7BU,EAAA5B,EAAA6B,cAAA,2BAAmB5C,KAAKsC,MAAMF,OAA9B,KACAO,EAAA5B,EAAA6B,cAAA,uBAAe5C,KAAKsC,MAAMf,QAA1B,aAjDU2B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAA5B,EAAA6B,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.97fb0095.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Button from '@material-ui/core/Button';\nimport secp256k1 from 'secp256k1';\nimport {randomBytes} from 'crypto';\nimport './App.css';\nconst createKeccakHash = require('keccak');\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      randomNumber:0,\n      pubKey:0,\n      pubKeyString:0,\n      keccak:0,\n      address:0,\n      minRange:0x1,\n      maxRange:0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140,\n      maxRangeString:'0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140'\n    }\n  }\n\n  toHexString = (byteArray) =>{\n    return Array.from(byteArray, function(byte) {\n      return ('0' + (byte & 0xFF).toString(16)).slice(-2);\n    }).join('')\n  }\n\n  generateRandomNumber = async ()=>{\n    let privKey = randomBytes(32);\n    let hexPrivKey = this.toHexString(privKey);\n    //privKey = Math.floor(privKey * (this.state.maxRange-1)+1);\n    let pubKey =  secp256k1.publicKeyCreate(privKey,false).slice(1);\n    let hexPubKey = this.toHexString(pubKey);\n    this.setState({randomNumber:hexPrivKey})\n    this.setState({pubKeyString:hexPubKey})\n    let hashPubKey = await createKeccakHash('keccak256').update(pubKey);\n    this.setState({keccak:hashPubKey.digest('hex')})\n    let address = this.state.keccak.toString().slice(-40);\n    this.setState({address:address});\n\n  }\n  render() {\n    return (\n      <div className=\"App\">\n      <p>Minimum for private key: 0x{this.state.minRange.toString(16)} <br/>\n      Maximum for private key: 0x{this.state.maxRangeString}\n      </p>\n        <Button variant='contained'\n                onClick={this.generateRandomNumber}\n                color='primary'>Click here to generate random number\n        </Button>\n\n        <p>Random Number: 0x{this.state.randomNumber.toString(16)}</p>\n        <p>Public Key: 0x{this.state.pubKeyString}</p>\n        <p>Keccak Hash: 0x{this.state.keccak} </p>\n        <p>Address: 0x{this.state.address} </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}